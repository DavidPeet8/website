{"version":3,"file":"component---src-pages-projects-memory-sanitizer-mdx-2235724aac2e9bf6872f.js","mappings":"sMAgBsBA,E,+CATTC,EAAe,CAC1B,MAAS,mBACT,KAAQ,QACR,MAAS,EACT,KAAQ,UACR,QAAU,EACV,OAAU,4EAQNC,GALgBF,EAKQ,UALA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,aAAAA,GAGa,SAASM,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGL,GACF,YACD,OAAO,SALS,UAKT,iBAAeG,EAAiBH,EAAhC,CAAuCK,WAAYA,EAAYC,QAAQ,eAC5E,oBAAI,cAAGC,WAAW,KACd,KAAQ,kDADR,sBAGJ,mBAAG,mBAAQA,WAAW,KAAnB,eAAH,UACA,mBAAG,mBAAQA,WAAW,KAAnB,qBAAH,KAA6D,uBAAYA,WAAW,KAAvB,SAA7D,KAAmH,uBAAYA,WAAW,KAAvB,SAAnH,KAAyK,uBAAYA,WAAW,KAAvB,UACzK,mBAAG,mBAAQA,WAAW,KAAnB,kBAAH,KAA0D,SAACR,EAAD,CAASS,IAAI,iDAAiDF,QAAQ,cAChI,qBACA,8FAA+E,eAAIC,WAAW,KAAf,aAA/E,6GAAiO,uBAAYA,WAAW,KAAvB,YAAjO,SAA8R,uBAAYA,WAAW,KAAvB,QAA9R,yRACA,kIAAmH,mBAAQA,WAAW,MAAI,eAAIA,WAAW,UAAf,0BAA1I,oMACA,4BACE,cAAGA,WAAW,cAAd,UAAqC,eAAIA,WAAW,KAAf,mBAArC,wCAAwH,mBAAQA,WAAW,MAAI,eAAIA,WAAW,UAAf,yCAA/I,OAEF,8CAA+B,eAAIA,WAAW,KAAf,oBAA/B,0GAAqL,eAAIA,WAAW,KAAf,oBAArL,+DAAgS,uBAAYA,WAAW,KAAvB,cAAhS,2PACA,oBACE,eAAIA,WAAW,MAAf,qDACA,eAAIA,WAAW,MAAf,mDAMNH,EAAWK,gBAAiB,G,qBCpDb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://gatsbywebsite/./src/pages/projects/memory_sanitizer.mdx","webpack://gatsbywebsite/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Memory Sanitizer\",\n  \"time\": \"stuff\",\n  \"index\": 6,\n  \"type\": \"project\",\n  \"hidden\": false,\n  \"splash\": \"Software shim monitoring process memory consumption & checking for leaks\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst GitLink = makeShortcode(\"GitLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1><a parentName=\"h1\" {...{\n        \"href\": \"https://github.com/DavidPeet8/Memory-Sanitizer\"\n      }}>{`Memory Sanitizer`}</a></h1>\n    <p><strong parentName=\"p\">{`Date Range:`}</strong>{` 2020`}</p>\n    <p><strong parentName=\"p\">{`Key Technologies:`}</strong>{` `}<inlineCode parentName=\"p\">{`C/C++`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Linux`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Make`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Github Source:`}</strong>{` `}<GitLink url=\"https://github.com/DavidPeet8/Memory-Sanitizer\" mdxType=\"GitLink\" /></p>\n    <hr></hr>\n    <p>{`Memory Leaks are a common error in low level programs which can lead to `}<em parentName=\"p\">{`thrashing`}</em>{` and sometimes security vulnerabilities. Common tooling for detecting and handling memory leaks includes `}<inlineCode parentName=\"p\">{`Valgrind`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ASAN`}</inlineCode>{`. Although both tools are quite useful at detecting leaks, ASAN has a mandatory compile time component rendering it useless on production executables, and Valgrind is just plain slow because it goes to the additional work of emulating x86 instructions by virtualizing the CPU.`}</p>\n    <p>{`Memory Sanitizer is designed to fill the void left by other tools by providing the ability to  smoke test a `}<strong parentName=\"p\"><em parentName=\"strong\">{`production executable`}</em></strong>{` for memory leaks. In this situation, no debug symbols exist, and optimizations are enabled, so it is highly unlikely that any memory sanitization program can provide much useful information.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Thus, `}<em parentName=\"p\">{`Memory Santizer`}</em>{` only needs to answer one question: `}<strong parentName=\"p\"><em parentName=\"strong\">{`given a program, does it leak memory`}</em></strong>{`?`}</p>\n    </blockquote>\n    <p>{`With this goal in mind, `}<em parentName=\"p\">{`Memory Sanitizer`}</em>{` shims memory allocation & deallocation calls  tracking memory consumption over the program lifetime. `}<em parentName=\"p\">{`Memory Sanitizer`}</em>{` attaches to production executables by taking advantage of `}<inlineCode parentName=\"p\">{`LD_PRELOAD`}</inlineCode>{` and dynamic linking order, essentially forcing executables to link with my memory allocation & deallocation implementations rather than those provided by the standard library. As a result of the minimal overhead in Memory sanitizer, it provides:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Over 100x startup time improvement over Valgrind`}</li>\n      <li parentName=\"ul\">{`Over 100x less runtime overhead than Valgrind`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["name","_frontmatter","GitLink","props","console","warn","layoutProps","MDXContent","components","mdxType","parentName","url","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}